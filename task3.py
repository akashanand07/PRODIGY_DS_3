# -*- coding: utf-8 -*-
"""Task3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qzBb6eQeq7CPv3lY0MjiMgsFLzgzwHQV
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
import seaborn as sns
df = pd.read_csv('/content/bank-additional-full.csv', sep=';')

# Display the first 5 rows to understand the data structure
print("First 5 rows of the dataset:")
print(df.head())
print("-" * 50)

#Data Preprocessing

# The target variable is 'y'. Let's convert it to a numerical format (0 and 1).
# 'yes' -> 1, 'no' -> 0
df['y'] = df['y'].map({'yes': 1, 'no': 0})

X = df.drop(['y', 'duration'], axis=1)
y = df['y']

# Perform one-hot encoding on categorical features
X = pd.get_dummies(X, drop_first=True)

# Display the preprocessed data to confirm the changes
print("Shape of the preprocessed data (features):", X.shape)
print("Columns of the preprocessed data:")
print(X.columns)
print("-" * 50)


#Model Training

# Split the data into training and testing sets
# We use a 70/30 split for training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print("Training set size:", X_train.shape[0])
print("Testing set size:", X_test.shape[0])
print("-" * 50)

# Create a Decision Tree Classifier instance
# We can set parameters like max_depth to prevent overfitting.
# Here we'll start with a default one to see the performance.
model = DecisionTreeClassifier(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)
print("Decision Tree model trained successfully.")
print("-" * 50)

#Model Evaluation
# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the Decision Tree model: {accuracy:.4f}")
print("-" * 50)

# Generate a detailed classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("-" * 50)

# Generate a confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)
print("-" * 50)

# Visualize the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

feature_importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
print("Top 10 Feature Importances:")
print(feature_importances.head(10))